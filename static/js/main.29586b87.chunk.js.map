{"version":3,"sources":["me.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","timer","react_default","a","createElement","className","style","backgroundColor","padding","height","width","color","fontSize","paddingTop","src","require","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sJAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mHC8EzBC,MA3Ef,WAEE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,MAAO,CAACC,gBAAgB,UAAUC,QAAQ,OAAQC,OAAO,OAAOC,MAAM,SAGrGR,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACC,gBAAgB,OAAQG,MAAM,OAAQD,OAAO,OAAOE,MAAM,QAAQC,SAAS,SACxFV,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,yCAGFF,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACO,WAAW,SACxBX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASS,IAAKC,EAAQ,IAAaC,IAAK,KAChDd,EAAAC,EAAAC,cAAA,2BAGLF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eACjBH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,0BACJF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,yCACJF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,qCAGJF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACdH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,uBAIDF,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,mBAGDF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,uBAGDF,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,mBAKDF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACbH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,uBAKDF,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,0BCnDiBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.29586b87.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.e1682e42.jpg\";","import  React from 'react';\nimport './App.css';\n\nfunction timer(){\n\t\n  return (\n    <div className=\"App App-logo\" style={{backgroundColor:'#cccffc',padding:'10px', height:'100%',width:'100%'}}>\n      \n\t  \n\t  <div style={{backgroundColor:'blue', width:'100%', height:'88px',color:'white',fontSize:'20px'}}>\n\t  <p>&nbsp;</p>\n\t  <p>Employee Performance Reoprt</p>\n\t  </div>\n\t  \n\t<div style={{paddingTop:'10px'}}>\n\t<img className=\"imgrad\" src={require(\"./me.jpg\")} alt={{}} />\n        <p>Welcome KO !!</p>\n      </div>\n\t  \n\t  <table className=\"tabledesign\">\n\t  <tr><th>Project name</th>\n\t  <th><code>Percentage of completion</code></th>\n\t  <th><code>Performance quality</code></th>\n\t  </tr>\n\t  \n\t  <tr className=\"oddrow\">\n\t  <td>Webapplication</td>\n\t  <td>80%</td>\n\t  <td>Excelent</td>\n\t  </tr>\n\t \n\t \n\t <tr>\n\t  <td>Android ROM</td>\n\t  <td>50%</td>\n\t  <td>Good</td>\n\t  </tr>\n\t \n\t <tr className=\"oddrow\">\n\t  <td>Server Scripting</td>\n\t  <td>90%</td>\n\t  <td>Excelent</td>\n\t  </tr>\n\t \n\t <tr >\n\t  <td>ERP</td>\n\t  <td>50%</td>\n\t  <td>Good</td>\n\t  </tr>\n\t \n\t \n\t \n\t <tr className=\"oddrow\">\n\t  <td>Mobile app</td>\n\t  <td>90%</td>\n\t  <td>Excelent</td>\n\t  </tr>\n\t \n\t \n\t \n\t <tr >\n\t  <td>Linux kernel</td>\n\t  <td>90%</td>\n\t  <td>Excelent</td>\n\t  </tr>\n\t \n\t  </table>\n\t  \n\t</div>\n\t\n\t\n  );\n}\n\n\n\n\n\nexport default timer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}